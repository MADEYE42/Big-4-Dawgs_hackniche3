/*
  # E-commerce Database Schema Update

  This migration ensures all necessary tables and policies exist,
  using IF NOT EXISTS clauses to prevent conflicts.

  1. Tables
    - users (extends auth.users)
    - categories
    - products
    - orders
    - order_items
    - points_history

  2. Security
    - Enable RLS on all tables
    - Add appropriate policies
*/

-- Create tables with IF NOT EXISTS
DO $$ BEGIN
  -- Users table
  CREATE TABLE IF NOT EXISTS public.users (
      id uuid REFERENCES auth.users NOT NULL PRIMARY KEY,
      full_name text,
      points integer DEFAULT 0,
      created_at timestamptz DEFAULT now()
  );

  -- Categories table
  CREATE TABLE IF NOT EXISTS public.categories (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      name text NOT NULL,
      slug text NOT NULL UNIQUE,
      created_at timestamptz DEFAULT now()
  );

  -- Products table
  CREATE TABLE IF NOT EXISTS public.products (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      name text NOT NULL,
      description text,
      price numeric NOT NULL,
      category_id uuid REFERENCES public.categories NOT NULL,
      image_url text,
      stock integer DEFAULT 0,
      created_at timestamptz DEFAULT now()
  );

  -- Orders table
  CREATE TABLE IF NOT EXISTS public.orders (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id uuid REFERENCES auth.users NOT NULL,
      total_amount numeric NOT NULL,
      status text DEFAULT 'pending',
      points_earned integer DEFAULT 0,
      created_at timestamptz DEFAULT now()
  );

  -- Order items table
  CREATE TABLE IF NOT EXISTS public.order_items (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      order_id uuid REFERENCES public.orders NOT NULL,
      product_id uuid REFERENCES public.products NOT NULL,
      quantity integer NOT NULL,
      price_at_time numeric NOT NULL,
      created_at timestamptz DEFAULT now()
  );

  -- Points history table
  CREATE TABLE IF NOT EXISTS public.points_history (
      id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
      user_id uuid REFERENCES auth.users NOT NULL,
      points integer NOT NULL,
      description text NOT NULL,
      created_at timestamptz DEFAULT now()
  );
END $$;

-- Enable Row Level Security
DO $$ BEGIN
  ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.order_items ENABLE ROW LEVEL SECURITY;
  ALTER TABLE public.points_history ENABLE ROW LEVEL SECURITY;
EXCEPTION
  WHEN others THEN null;
END $$;

-- Create policies if they don't exist
DO $$ BEGIN
  -- Users policies
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'users' AND policyname = 'Users can read their own data'
  ) THEN
    CREATE POLICY "Users can read their own data" ON public.users
      FOR SELECT TO authenticated
      USING (auth.uid() = id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'users' AND policyname = 'Users can update their own data'
  ) THEN
    CREATE POLICY "Users can update their own data" ON public.users
      FOR UPDATE TO authenticated
      USING (auth.uid() = id);
  END IF;

  -- Categories policies
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'categories' AND policyname = 'Categories are readable by everyone'
  ) THEN
    CREATE POLICY "Categories are readable by everyone" ON public.categories
      FOR SELECT TO public
      USING (true);
  END IF;

  -- Products policies
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'products' AND policyname = 'Products are readable by everyone'
  ) THEN
    CREATE POLICY "Products are readable by everyone" ON public.products
      FOR SELECT TO public
      USING (true);
  END IF;

  -- Orders policies
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'orders' AND policyname = 'Users can read their own orders'
  ) THEN
    CREATE POLICY "Users can read their own orders" ON public.orders
      FOR SELECT TO authenticated
      USING (auth.uid() = user_id);
  END IF;

  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'orders' AND policyname = 'Users can create their own orders'
  ) THEN
    CREATE POLICY "Users can create their own orders" ON public.orders
      FOR INSERT TO authenticated
      WITH CHECK (auth.uid() = user_id);
  END IF;

  -- Order items policies
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'order_items' AND policyname = 'Users can read their order items'
  ) THEN
    CREATE POLICY "Users can read their order items" ON public.order_items
      FOR SELECT TO authenticated
      USING (EXISTS (
        SELECT 1 FROM public.orders
        WHERE orders.id = order_items.order_id
        AND orders.user_id = auth.uid()
      ));
  END IF;

  -- Points history policies
  IF NOT EXISTS (
    SELECT 1 FROM pg_policies WHERE schemaname = 'public' AND tablename = 'points_history' AND policyname = 'Users can read their points history'
  ) THEN
    CREATE POLICY "Users can read their points history" ON public.points_history
      FOR SELECT TO authenticated
      USING (auth.uid() = user_id);
  END IF;
END $$;